"front","back","tags"
"comp: main memory contains the instructions to?","execute any data needed","main-memory"
"comp: supply an address to main memory to either...?","retrieve a line of code/data OR overwrite a line of data","main-memory"
"comp: a program is?","a sequence of instructions","PC"
"comp: PC stands for?","program counter","PC"
"comp: the PC passes the address to the (...) to fetch the instruction to be executed","instruction memory","PC"
"comp: the control unit should be given (...)","an instruction’s opcode and other relevant inputs","control-unit"
"comp: the control unit sends (...)","signals to the rest of the CPU","control-unit"
"comp: the control unit facilitates (...)","instruction execution","control-unit"
"comp: registers provide?","storage internal to the CPU","register"
"comp: a register file is a collection of?","registers","register"
"comp: RFLE stands for?","register file load enable","register"
"comp: RFLE allows for?","writing to the register file","register"
"comp: PC is (...) of the register file","not a part","PC register"
"comp: the three steps of the incremental design approach?","(1) divide instructions into instruction classes based on OPCODE field, (2) implement datapaths for each class individually, (3) merge datapaths","incremental-design"
"comp: the three instruction classes based on OPCODE field?","(1) operate instructions (e.g. add), (2) main memory instructions (e.g. load), (3) program control instructions (e.g. jump) (OMP)","incremental-design"
"comp: WERF stands for?","write enable register file","WERF"
"comp: the WERF controls?","whether or not the current instruction can overwrite a register in the register file","WERF"
"comp: values of WERF?","0 for instructions that don’t overwrite a register; 1 for instructions that overwrite a register","WERF"
"comp: ALUFN stands for?","ALU function","ALUFN"
"comp: ALUFN controls?","what the ALU does","ALUFN"
"comp: values of ALUFN?","code for a specific function","ALUFN"
"comp: BSEL stands for?","B selector","BSEL"
"comp: BSEL controls?","what gets passed as the ALU’s B input","BSEL"
"comp: values of BSEL?","0 for instructions that need input from Rb; 1 from instructions that need input from constant","BSEL"
"comp: BSEL is DC when?","ALUFN is DC","BSEL"
"comp: how to sign-extend a 16-bit value to a 32-bit value?","arithmetic right shift (kinda, except the original value is kept at the right)",
"comp: WDSEL stands for?","write data selector","WDSEL"
"comp: WDSEL controls?","what to pass to the register file’s Rc port data","WDSEL"
"comp: values of WDSEL?","0 for BEQ/BNE (<PC>+4), 1 for ALU output; 2 for main memory (number of M’s)","WDSEL"
"comp: WDSEL is DC when?","WERF is 0","WDSEL"
"comp: Wr stands for?","write to memory","Wr"
"comp: Wr controls?","whether or not the current instruction can overwrite a location in the main memory","Wr"
"comp: values of Wr?","0 for instructions that don’t overwrite main memory; 1 for instructions that overwrite main memory","Wr"
"comp: RA2SEL stands for?","read address #2 selector","RA2SEL"
"comp: RA2SEL controls?","what address is used for the second register (if applicable","RA2SEL"
"comp: values of RA2SEL?","0 for Rb (Rb[15:11]); 1 for Rc (Rc[25:21])","RA2SEL"
"comp: RA2SEL is 1 for what instruction?","ST (store)","RA2SEL"
"comp: PCSEL stands for?","program counter selector","PCSEL"
"comp: PCSEL controls?","what instruction address is to be used next cycle","PCSEL"
"comp: values of PCSEL?","0 for default <PC>+4; 1 for branches (<PC>+4+4C); 2 for Ra (jump target); 3 for ILLOP; 4 for XAdr   ","PCSEL"
"comp: PCSEL is 2 when?","JMP instruction is used","PCSEL"
"comp: Z stands for?","zero check","PCSEL"
"comp: values of Z?","1 if Ra is 0; 0 otherwise","PCSEL"
"comp: PCSEL is Z when?","BEQ instruction is used","PCSEL"
"comp: PCSEL is !Z when?","BNE instruction is used","PCSEL"
"comp: XP is for handling?","“INTERRUPTS” aka “exceptions”","exceptions-and-interrupts"
"comp: XP is assigned to what register?","R30","exceptions-and-interrupts"
"comp: ILLOP handles?","illegal operations","exceptions-and-interrupts"
"comp: XAdr handles?","interrupt requests","exceptions-and-interrupts"
