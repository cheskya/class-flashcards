#tags: CSCI50.01 CSCI50.01-Module6
#tags column: 3
#deck: "CSCI 50.01 Module 6"
#separator: comma
"comparch: CPU has what components?","ALU, general purpose registers, temporary storage for operations, FSM, memory, PC","computer-architecture CPU"
"comparch: FSM stands for?","finite state machine","computer-architecture CPU"
"comparch: CPU needs a memory to?","store code and data","computer-architecture CPU"
"comparch: the memory the CPU uses is called?","main memory","computer-architecture CPU"
"comparch: PC stands for?","program counter","computer-architecture CPU PC"
"comparch: CPU needs a PC to?","remember where we are in the code","computer-architecture CPU PC"
"comparch: PC contains a?","memory address","computer-architecture PC"
"comparch,PC: contents at the address is assumed to be an?","instruction","computer-architecture PC"
"assem: fetch/execute loop?","(1) fetch PC, (2) PC = PC + 4, (3) execute fetched instruction, (4) go back to step 1","computer-architecture PC computer-assembly"
"comparch: in a bus-based CPU, components share (...)","a bus","computer-architecture CPU bus-based-CPU"
"comparch: a bus is a set of (...)","wires","computer-architecture CPU bus-based-CPU"
"comparch,bCPU: a tri-state driver controls?","who “drives” or the bus inputs and outputs at any given time","computer-architecture CPU bus-based-CPU"
"comparch,bCPU: this saves (...) but limits (...)","wire and space, data movement","computer-architecture CPU bus-based-CPU"
"comparch,bCPU: takes (...) cycle/s to execute an instruction (amt)","several","computer-architecture CPU bus-based-CPU"
"comparch,bCPU: the result is?","microprogramming","computer-architecture CPU bus-based-CPU"
"comparch: in a non-bus-based CPU, components are (...)","connected directly","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: this needs more (...)","wire and space","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: (...) things can happen at the same time (frequency)","more","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: takes (...) cycle/s to execute an instruction (amt)","one","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: the result is?","hardwired control","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: it cannot do (...) instructions in one cycle","complex","computer-architecture CPU non-bus-based-CPU"
"comparch,nbCPU: each instruction corresponds to?","the setting of signals by the control logic for one clock cycle","computer-architecture CPU non-bus-based-CPU"
"comparch,microprog: can do (...) instructions (with conditionals and loops)","complex","computer-architecture CPU bus-based-CPU microprogramming"
"comparch,microprog: leads to?","CISC","computer-architecture CPU bus-based-CPU microprogramming"
"comparch: CISC stands for?","complex instruction set computer","computer-architecture CPU bus-based-CPU microprogramming"
"comparch,hawicon: limited to (...) instructions (so no loops)","one-cycle","computer-architecture CPU non-bus-based-CPU hardwired-control"
"comparch,hawicon: leads to?","RISC","computer-architecture CPU non-bus-based-CPU hardwired-control"
"comparch: RISC stands for?","reduced instruction set computer","computer-architecture CPU non-bus-based-CPU hardwired-control"
"comparch: which is simpler and faster to implement? (microprog/hawicon)","hardwired control","computer-architecture CPU"
"comparch: which has simpler functionality? (CISC/RISC)","RISC","computer-architecture CPU"
"comparch: which has longer code? (CISC/RISC)","RISC","computer-architecture CPU"
"comparch: heirarchy for programming a CPU?","high level language program -> assembly language program -> machine language program -> instruction set -> control signal specification","computer-architecture CPU"
"comparch: definition of instruction set","contract/interface that specifies how to program a computer","computer-architecture CPU"
"comparch: components of an instruction set?","visible state (registers, memory, etc.), operations on state (instructions)","computer-architecture CPU"
"assem,worddisp: equal to 0 if?","label is the line immediately after the branch instruction (AFTER)","computer-architecture computer-assembly"
"assem,worddisp: equal to X if?","label is after the branch instruction AND there are X lines between them (AFTER)","computer-architecture computer-assembly"
"assem,worddisp: equal to -1 if?","label is the branch instruction’s line (BEFORE KINDA)","computer-architecture computer-assembly"
"assem,worddisp: equal to -1-X if?","label is before the branch instruction AND there are X lines between them (BEFORE)","computer-architecture computer-assembly"
